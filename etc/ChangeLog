2006-12-29  Francois Dumont  <dums@stlport...>

	* src/iostream.cpp, stlport/stdio.h, stl/_cstdio.h: Eric Sanford
	patch to move a Borland workaround from cstdio to stdio.h.

	* stlport/stl/debug: Generalize _STLP_NO_MOVE_SEMANTIC check
	to hide move constructors like already done in non debug
	implementation.

	* stlport/stl/config/_msvc.h: Restore move semantic for MSVC6. AFAIR
	only MSVC .Net 2002 had problem with it.

	* test/unit/strstream_test.cpp: Made the tests for _STLP_LONG_LONG
	a little bit more portable.

2006-12-20  Francois Dumont  <dums@stlport...>

	* test/unit/strstream_test.cpp: New test case for sourceforge
	bug report 1615554. Not confirm for the moment.

	* test/unit/math_aux.h, mvctor_test.h, string_test.cpp: Fixes
	to correctly take into account _STLP_USE_NAMESPACES.

2006-12-19  Francois Dumont  <dums@stlport...>

	* test/unit/bvector_test.cpp: Fix macro check for namespace
	support.

	* test/unit/num_put_get_test.cpp: disable warning about float
	overflow for MSVC.

2006-12-17  Francois Dumont  <dums@stlport...>

	* test/unit: One more cleanup for compilers not supporting the
	namespace feature. This time we avoid namespace specification when
	doing template specialisation of Standard functor like less or
	allocator.

2006-12-15  Francois Dumont  <dums@stlport...>

	* stlport/stl/config/_dm.h, test/unit/map_test.cpp: Eric Sanford
	patch for DMC.

2006-12-13  Francois Dumont  <dums@stlport...>

	* test/unit/test_main.cpp: Clean up use of namespace feature.

	* test/unit: Clean up use of std namespace or ignore tests if
	necessary.

2006-12-13  Petr Ovtchenkov  <complement@users.sourceforge.net>

	* stlport, src: Orphan code removed [Symantec without maintainance a long time;
	gcc prior 2.95 and 2.96 can't work with current code in any case;
	NetWare unsupported too]

2006-12-13  Francois Dumont  <dums@stlport...>

	* stlport/stl/config/feature.h: Fix and generalize the mutable
	workaround for compilers missing this feature. Replace
	_STLP_ASSIGN_MUTABLE with _STLP_MUTABLE macro that is more flexible
	as not limited to assignment.

	* stlport/stl/_istreambuf_iterator.h, _stream_iterator.h, _string_sum.h:
	Use _STLP_MUTABLE rather than manually handle _STLP_NEED_MUTABLE macro.

	* stlport/stl/_sstream.h: Removed useless mutable qualifier for
	basic_stringbuf _M_str member.

	* test/unit/bind_test.cpp: Use STLport mutable workaround.

	* src/message_facets.h, facets_byname.cpp: Limit use of the mutable
	qualified to one member in _Message_Impl class and use _STLP_MUTABLE
	in class implementation.

2006-12-11  Francois Dumont  <dums@stlport...>

	* test/unit/mvctor_test.cpp: Split in 2 other translation unit
	mvctor_declaration_test.cpp and mvctor_traits_test.cpp without
	impacting number of test case. It helps DMC to perform a correct
	link.

	* stlport/stl/type_manips.h: Check _STLP_DONT_USE_PRIV_NAMESPACE before
	importing __true_type and __false_type in private namespace.

	* stlport/stl/config/_dec.h, _apcc.h: Removed references to unused
	_STLP_HAS_NO_NEW_IOSTREAMS macro.

2006-12-11  Petr Ovtchenkov  <complement@users.sourceforge.net>

	* src/fstream.cpp, stlport/stl/_fstream.h: non-template friend function
	of template class isn't good idea. Fixed.

2006-12-09  Francois Dumont  <dums@stlport...>

	* stlport/stl/_range_errors.h: To complete 2006-12-04 modification
	fix inclusion to access to string definition. In normal mode we include
	stlport/stl/_string.h rather than string header. There is a special case
	however if cumulating _STLP_NO_IOSTREAMS, _STLP_DONT_REDEFINE_STD and
	_STLP_WHOLE_NATIVE_STD then functions defined in _range_errors.h will
	throw exception from std namespace rather than from stlport.

	* stlport/stl/config/user_config.h: Documented above modification.

	* stlport/stl/config/features.h: Modify _STLP_VENDOR_STD definition. This
	internal macro do not have to use __std_alias, within STLport code std is
	not a macro and can be used as the vendor namespace.

2006-12-07  Francois Dumont  <dums@stlport...>

	* stlport/stl/_algobase.c, config/features.h: Removed unused
	_STLP_MPW_EXTRA_CONST macro.

	* stlport/stl/config/_watcom.h, _dm.h, feature.h: Add new 
	_STLP_NO_CONST_IN_PAIR macro config to avoid instanciation of
	pair with a const qualified type. _STLP_CONST is defined based
	on _STLP_NO_CONST_IN_PAIR.

	* stlport/stl/_map.h, _hash_map.h, _unordered_map.h: Add use of
	_STLP_CONST.

	* stlport/stl/_num_put.c: Introduce __do_put_bool function containing
	all codes to render bool values. We do not use anymore
	__copy_integer_and_fill function that was difficult to instanciate for
	Open Watcom compiler. Moreover this function was not really adapted for
	being use in this context, code duplication is very limitated and
	absolute number of lines of code hasn't been modified.

	* stlport/stl/_fstream.h, src/fstream.cpp: Removed useless declaration
	of template specialization for _Noconv_input _Noconv_output and _Underflow.
	_Underflow template specialization now use a function __Underflow_doit
	to avoid the complex syntax of the implementation of a member method of
	a template class specialization in fstream.cpp.

	* src/message_facets.h: Add missing allocator parameter in hash_map
	instanciation, required for compiler lacking default template parameters
	support.

	* src/num_get_float.cpp: Add unsigned 64 bits support for Open Watcom.

	* stlport/stl/_cmath.h, _cstdlib.h: Signal that Open Watcom has already
	all math functions C++ overloads in global namespace.
	
	* Cleanup of all workarounds for MSVC before version 6.

	* build/Makefiles/gmake/gcc.mak: Hide -fvisibility option for windows as
	in this context we are not able to correctly detect gcc version in use. 

	* stlport/stl/_fstream.h: Reorder member variables in _Filebuf_base
	to avoid gcc warning.

2006-12-06  Francois Dumont  <dums@stlport...>

	* STLport 5.1.0 released based on STLPORT_5_1 branch revision 2750.

	* Merge STLPORT_5_1 branch from revision 2711 to 2749.

	* stlport/stl/config/_hpux.h: Specify that Hp Unix is a unix platform
	_STLP_UNIX. This platform was already recognise as a unix platform
	but it is more clear to put it in Hp Unix configuration file.

	* src/num_put_float.cpp: Limit Hp Unix workaround to access isfinite
	isnan and some other system functions to the gcc compiler, aCC has
	natively access to it. Tests done by Boris Gubenko.

2006-12-04  Francois Dumont  <dums@stlport...>

	* stlport/fstream, iomanip, ios, iosfwd, iostream, istream, locale,
	ostream, sstream, streambuf, strstream: Allow use of iostream headers
	even when _STLP_NO_IOSTREAMS is defined if using _STLP_WHOLE_NATIVE_STD.

2006-12-02  Francois Dumont  <dums@stlport...>

	* stlport/stl/_string.c: Use find_end algo rather than internal
	__find_end function, find_end contains workaround for limited
	compilers.

	* stlport/stl/_algo.c: Avoid a useless default value for last
        parameter of __stable_partition_aux_aux function.

	* src/num_put.cpp: In __insert_grouping_aux, use template parameter
	Str to get iterator definition rather than getting definition from
	basic_string.

	* stlport/stl/_num_get.c, _num_put.c: Complete basic_string
	definition for compiler not supporting default template parameters.

	* stlport/cmath, cstdio, typeinfo: Modified to be reentrant once.

	* stlport/stl/_alloc.h, _bvector.h, _construct.h, _deque.h,
	_hash_map.h, _hash_set.h, _hashtable.h, _list.h, _map.h, _pair.h,
	_queue.h, _rope.h, _set.h, _slist.h, _stack.h, _string.h,
	_string_base.h, _string_workaround.h, _tree.h, _unordered_map.h,
	_unordered_set.h, _vector.h: Now _STLP_NO_MOVE_SEMANTIC hide all
	calls to _AsMoveSource function. 

2006-11-30  Francois Dumont  <dums@stlport...>

	* test/unit/stack_allocator.h: Fixed StackAllocator implementation
	for Borland and DMC that required a workaround.

	* stlport/stl/config/_gcc.h: Starting with gcc 4, use visibility
	feature.

	* build/Makefiles/gmake/gcc.mak: Starting with gcc 4, add
	-fvisibility=hidden compilation option.

2006-11-28  Francois Dumont  <dums@stlport...>

	* stlport/stl/_alloc.h: Avoid explicit instanciation of template
	function _AsMoveSource. Replace internal allocator::allocate function
	with _M_allocate to avoid use of overloading.

	* stlport/utility: Fix header reentrancy.

	* stlport/stl/_ptrs_specialize.h: Fixed instanciation of
	__type_traits_aux.

2006-11-25  Francois Dumont  <dums@stlport...>

	* stlport/climits, iosfwd, mem.h, string.h, typeinfo.h, wchar.h,
	stl/char_traits:
	Eric Sanford patch to complete use of include_next with Borland
	compilers.

	* stlport/using/cstring: Fix macro check for Borland compiler.

	* test/unit/locale_test.cpp: Add test for Borland _fpclass.

	* src/num_put_float.cpp: Fix potential error in _Stl_is_neg_nan
	for Borland compiler after 0x581.

2006-11-24  Francois Dumont  <dums@stlport...>

	* stlport/stl/_fstream.h, src/fstream.cpp, iostream.cpp: Restore
	computation of the system dependant page size that was hardcoded
	to 4096. Initialisation code has been moved to a static method
	called just after Standard iostream initialisation. This code used
	to be in the _Filebuf_base constructor that might have been called
	simultaneously by several threads.

	* Eric Sanford patch for DMC compiler, allow access to associative
	containers extension.

	* stlport/typeinfo.h, exception: Workaround for DMC that force
	inclusion of typeinfo.h at the begining of all translation units.

2006-11-23  Francois Dumont  <dums@stlport...>

	* test/unit/cstring_test.cpp: New test case to check import of all
	C functions from string.h in STLport namespace.

	* stlport/using/cstring: Fix import of strcmp and strcpy for Borland.

2006-11-20  Francois Dumont  <dums@stlport...>

	* stlport/iosfwd, stl/type_manips.h, config/_bc.h, pointers/_tools.h:
	Patch from Eric Sanford to remove useless Borland workaround for
	pointer specialisation and use include_next feature of versions after
	0x580.

2006-11-20  Petr Ovtchenkov  <complement@users.sourceforge.net>

	* src/monetary.cpp: template header not allowed in member definition
	of explicitly specialized class

2006-11-19  Francois Dumont  <dums@stlport...>

	* stlport/stl/_ios_base.h: Replace wrong external utility inclusion
	with internal _pair.h header.

2006-11-17  Francois Dumont  <dums@stlport...>

	* stlport/stl/config/features.h: Modification of the static constant
	workaround implementation to use something similar to the boost
	workaround. _STLP_STATIC_CONST_INIT_BUG macro change definition of
	newly introduce _STLP_STATIC_CONSTANT macro which use an enum or a
	real static const variable. Moreover the new
	_STLP_NO_STATIC_CONST_DEFITION will hide static constant definition
	when defined.

	* src/ctype.cpp, ios.cpp, locale.cpp: Add check for
	_STLP_NO_STATIC_CONST_DEFITION.

	* src/monetary.cpp: Add intl static constant definitions.

	* stlport/stl/_ctype.h, _ios_base.h, _limits.h, _monetary.h: Use
	_STLP_STATIC_CONSTANT.

	* stlport/stl/_limits.h: Limits a workaround for long long and unsigned
	long long types that used to be applied for gcc after 2.96 to version
	before 3.0.

	* stlport/stl/_limits.c: Clean all static constant values duplicated from
	_limits.h that was not used in this file. Add static constant definition
	necessary for long long and unsigned long long types for gcc between 2.96
	and 3.0 (see above).

	* stlport/stl/debug/_string.h: Removed npos static constant definition
	that is only necessary in stlport/stl/_string.c.

	* stlport/stl/config/_msvc.h: Use real static constant starting with
	VS .Net 2003 (_MSC_VER >= 1310).

	* test/unit/limits_test.cpp: Modified test to reveal potentially missing
	static constant definitions.

2006-11-13  Francois Dumont  <dums@stlport...>

	* stlport/stl/config/stl_confix.h: Add some STLport config options based
	on EDG version information using boost common_edg.hpp content.

	* stlport/stl/: Patch from Eric Sanford for Borland compiler. Allow
	associative container extension (member methods) and use of pointer
	specialization.

2006-11-07  Francois Dumont  <dums@stlport...>

	* stlport/stl/config/_hpacc.h, stl_confix.h: Thanks to additional info
	from Boris Gubenko STLport now check __EDG_VERSION__ to detect EDG based
	compilers. It use this macro to activate include_next feature. Moreover
	a workaround has been added for aCC6 that was not defining __EDG_VERSION__
	as expected. _hpacc.h has also been cleaned of obsolete config.

2006-11-07  Francois Dumont  <dums@stlport...>

	* stlport: All C++ Standard headers are now using the same schema. If
	included from outside (_STLP_OUTERMOST_HEADER_ID not defined) it first
	included internal header (in stl folder) and then, if _STLP_WHOLE_NATIVE
	is defined, include the equivalent native Standard header. If included
	from inside, simply forward to native header include. This schema has
	several advantages:
	- Less dependancy on native library headers interdependancy.
	- Less code included as STLport code is only exposed if headers are
	included from the outside.
	- Restore _STLP_WHOLE_NATIVE_STD configuration (tested with gcc, msvc, bcc)
	The condition for this schema to work is that STLport never include Standard
	headers internaly when it wants to access some STLport code.

	* stlport/stl/_iomanip.h: New file containing all STLport code that used
	to be in stlport/iomanip.

	* stlport/stl/_complex.h, _rope.h, _stream_iterator.h, _string_fwd.h: Use
	stl/_iomanip.h rather than iomanip.

	* stlport/stl/_rope.c: Use stl/_ostream.h and stl/_istream.h rather than
	iostream.

	* stlport/stl/config/_kai.h, _msvc.h, feature.h: _STLP_MINIMUM_IMPORT_STD
	macro removed, it was only used in vector header to avoid include of
	native vector header even when _STLP_IMPORT_VENDOR_STD was defined. MSVC6
	used to define it but removing it hasn't make compilation failed when
	importing all native std stuff. Looks like it was a workaround necessary
	when STLport was not as clean as it is now or for the former wrapper mode
	that has been removed.

	* stlport/stl/config/features.h: Add a #error to signal that
	_STLP_WHOLE_NATIVE_STD and _STLP_NO_OWN_NAMESPACE are incompatible
	options.

	* stlport/stl/config/stl_confix.h

2006-11-05  Francois Dumont  <dums@stlport...>

	* stlport/stl/_sstream.h, _sstream.c: Add 2 helper functions _S_Start and
	_S_Finish to hide complexity of code required to have read access to the
	aggregated string instance internal buffer. Those 2 functions help keeping
	basic_stringbuf implementation simple without requiring a friend
	declaration in basic_string class and use of inheritance in _STLP_DEBUG
	mode between the debug string and the non debug one.

	* stlport/stl/_string.h, debug/_string.h, _string_sum_methods.h: Removed
	friend declaration and inheritance (see above). This also avoids to restore
	some workarounds that used to be necessary when _STLP_DEBUG mode was using
	inheritance in all the debug containers.

2006-11-04  Francois Dumont  <dums@stlport...>

	* src/num_put_float.cpp: According C Standard number of digits in the
	exponent part of scientific output should be at least 2, C99 even says
	that we shouldn't add zeros if there are move than 3 significant digits.

	* test/unit/complete_digits.h: Modified according to above rules.

2006-11-02  Francois Dumont  <dums@stlport...>

	* Repository: Merged STLPORT_5_1_RC3 tag changes up to r2771 into the trunk.
	Now trunk is really in sync with STLPORT_5_1 branch.

	* etc/ChangeLog: Now contains only trunk modif, 5.1 changes are in
	ChangeLog-5.1.

2006-11-02  Petr Ovtchenkov  <complement@users.sourceforge.net>

	* Repository: merged from 5.1 branch.

2006-11-01  Francois Dumont  <dums@stlport...>

	* stlport/stl/_stdexcept_base.h: Patch from Uli to simplify
	__Named_Exception implementation.

2006-10-31  Francois Dumont  <dums@stlport...>

	* build/test/unit/Makefile.inc: Restore STLport version information that
	had mysteriously disappeared in a previous modification.

	* stlport/stl/_num_put.c: Disable warning for MSVC that signal problem in
	cast from pointer to unsigned long.

	* src/num_put_float.cpp: Fix buffer overflow introduce by a previous
	modification. Now STLport appends '0' so that floating point scientific
	output has a constant size. MAXESIZ renamed in MAXEDIGITS to make macro
	signification more obvious.

	* test/unit/complete_digits.h: New file containing the function giving
	platform dependant number of digits in STLport scientific output of
	floating point types.

	* test/unit/num_put_get_test.cpp, locale_test.cpp: Adapt tests to latest
	STLport modifications.

2006-10-30  Francois Dumont  <dums@stlport...>

	* stlport/stl/_stlport_version.h: Upgrade STLport version information
	to reflect built libraries.

2006-10-24  Petr Ovtchenkov  <complement@users.sourceforge.net>

	* stlport/stl/config/host.h, _linux.h: force usage malloc_alloc as default
	allocator on systems with glibc 2.3.x and later	due to better performance.

	* stlport/stl/_alloc.h: remove _STLP_MALLOC_USABLE_SIZE dependant
	code---not really used.
	
	* stlport/stl/_alloc.c: remove recalculation of __n [Francois was right];
	remove _STLP_MALLOC_USABLE_SIZE dependant code---not really used.

	* src/allocators.cpp: remove additional __malloc_alloc_impl class---not
	required; add mutex lock for custom __malloc_alloc oom handler change/use
	[in multi-threaded environment].

2006-10-16  Petr Ovtchenkov  <complement@users.sourceforge.net>

	* stlport/stl/c_locale.h, _mbstate_t.h, src/c_locale.h, c_locale.c:
	merge changes from STLPORT_5_1 branch, see 2006-10-12 [Francois Dumont];
	may be problems on Solaris, and FreeBSD---more check required.

2006-10-13  Petr Ovtchenkov  <complement@users.sourceforge.net>

	* Repository: merge changes [not all] 2006-10-12 from STLPORT_5_1 branch

2006-10-12  Petr Ovtchenkov  <complement@users.sourceforge.net>

	* Repository: merge changes from STLPORT_5_1 branch (records
	from 2006-10-06 to 2006-10-04).

	* stlport/stl/_alloc.c: Hmm, looks like deallocation size in
	2006-10-06 is wrong.

	* stlport/stl/_num_put.c: print pointer as in fix width form, and
	with base 0x, independent, zero pointer or not.

	* test/unit/num_put_get_test.cpp: test for issue above.

	* test/unit/string_test.cpp: test for overloaded operators
	and temporary string; inspired by problems with some compilers.

	* stlport/stl/_mbstate_t.h: revert back changes from STLPORT_5_1 branch;
	mbstate_t couple with wchar closely, and sometimes has compex and implicit
	dependance; include wchar.h first required! 

2006-09-12  Petr Ovtchenkov  <complement@users.sourceforge.net>

	* test/unit/string_test.cpp: add test for bug report #1541499,
	problem not detected; looks like gcc 4.1.1 can compile te_tmp test
	correctly [sum operations under class derived from string, with
	_STLP_USE_TEMPLATE_EXPRESSION].

2006-09-08  Petr Ovtchenkov  <complement@users.sourceforge.net>

	* stlport/stl/_sstream.h, _sstream.c: remove double buffering
	on write only underlying string as buffer. Use knowlege about
	string implementation, this should improve performance, and,
	at least simplify code and avoid logic that already present in
	string implementation.

	* stlport/stl/_string_base.h: basic_streambuf is friend, to access
	to internal function (access to storage pointers).

	* stlport/stl/debug/_string.h, _string_sum_methods.h: change usage
	of 'non-debug string', from 'use of' relation to 'inherit' releation.
	Useful for access basic_streambuf to string storage in _STLP_DEBUG
	mode too.
		
	* test/unit/sstream_test.cpp: test for tellp call; change test
	with inited ostringstream in accordance with another Standard
	treatment.
	
	* stlport/stl/_streambuf.h: remove ancient code, that can't
	work with present code in any case.

	* src/c_locale.c: ditto

	* build/lib/Makefile.inc: bump minor version (5.2.0)

2006-07-27  Francois Dumont  <dums@stlport...>

	* stlport: Adopt include_next GNU extension for the following reasons:
	- Standard headers do not have to be categorised anymore to be
	included, we could have a wrong include order if headers are not
	correctly categorized.
	- Package builder can use any folder structure they want for gcc,
	STLport won't have to be customized anymore.
	- Make STLport usable with other library that also use the shadow
	header trick to modify native headers content.

	* stlport/stl/config/_gcc.h: Add definition of _STLP_HAS_INCLUDE_NEXT
	macro to signal that this compiler preprocessor support include_next.
	Removed all definition of native headers path that are now useless.

2006-03-27  Petr Ovtchenkov  <complement@users.sourceforge.net>

	* src/num_put_float.cpp: use buffers that at least longer
	than maximal double [or long double] exponent, so avoid
	potential vulnerabilities; this allow to read really long
	fix-float numbers [with lost of significant digits, of cause].

	* test/unit/floatio_test.cpp: add test for issue above

2006-03-23  Petr Ovtchenkov  <complement@users.sourceforge.net>

	* src/cxa.c: remove wrong exclusion of lock for Solaris.
