
========================================
STLport README for eMbedded Visual C++ 4
========================================

by: Zdenek Nemec, zero@mapfactor.com, last edited 6/1/2004

============
Introduction
============
This document should provide step-by-step guidance installing, testing and using STLport library under Windows CE .NET 4.x 
(aka Windows Mobile 2003 aka Pocket PC 2003).
For any further comments or questsion visit STLport forum http://www.stlport.com/cgi-bin/forum/dcboard.cgi.

=============
Prerequisites
=============
To build and use STLport you will need following tools and libraries:
 - eMbedded Visual C++ 4.0 sp3
 - Microsoft RTTI patch, to enable C++ exception handling, available at http://support.microsoft.com/default.aspx?scid=kb;[LN];830482
 - lastest CVS version of STLport, use 'cvs -d :pserver:cvs@cvs.stlport.com:/stlport checkout STLport' to get it 
 
================
Building STLport
================
First, make sure that RTTI patch is properly installed.

Second, open command line and set proper system variables.
This can be done by using batch files under your 'eMbedded Visual C++' directory(use either WCEemulator.BAT if you want to build STLport for emulator or WCEARMV4.BAT if you intend to aim an ARM device).
NOTE: If you are using Microsoft's batch files to set system variables check those files if both WCEROOT and SDKROOT are set to correct locations. example: 
if "%WCEROOT%"=="" set WCEROOT=C:\Program Files\Microsoft eMbedded C++ 4.0
if "%SDKROOT%"=="" set SDKROOT=C:\Program Files\Windows CE Tools

Third, when you are 100percent sure you've set correctly systems variables go to STLport/src/explore dir, 
there invoke following command: 'nmake /f nmake-evc4-x86.mak install' if you set variables for emulator 
or 'nmake /f nmake-evc4-arm.mak install' if are building for ARM.

At this moment building of STLport should be underway.
If anything goes wrong check if you met all prerequisities and if you set system vars accordingly to makfile you are using.
At the end of build process you should have some libs installed in STLport/lib directory.

You might want to repeat all those steps if you would like to have both ARM and x86 emulator binaries, just don't forget to do 'nmake /f nmake-evc4-x86.mak clobber' or 'nmake /f nmake-evc4-arm.mak clobber' before new build. 

===============
Testing STLport
===============
When you successfuly build STLport libs, you should go to STLport/test/unit directory build and run the STLP test suite. 
Use 'nmake /f nmake-evc4-x86.mak' or 'nmake /f nmake-evc4-arm.mak' and keep in mind that you still have to have proper system variables set! 
Once test build has finished upload and run stlp_unit_test.exe to your emulator or device. 
Wait for a while (aprox. 2mins) untill all tests are done. 
You should see two files next to your binary now. 
Check stlp_test.txt for any errors. If all tests passed you are ready to deploy STLport.
If some test fails don't worry and check the STLport forum if it's already reported bug or you have found a new one. 

=============
Using STLport
=============
Before you start using STLport you have to set proper include and libraries search paths.
Go to 'Tools'>'Options' menu in your eVC 4.0 and then to 'Directories' tab.
For every platform you want to use STLport add STLport/stlport directory to the FIRST place in 'Include Files' 
and STLport/lib directory in 'Library files' section.
Now you should be ready to use STLport. 

============
Known issues
============
 - C4275 warning while building dynamic libs, non – DLL-interface classkey 'identifier' used as base for DLL-interface classkey 'identifier'
    Please ignore this warning, it is caused by Microsoft std::exception class declaration. 
    Since everything is inline here it really doesn't matter.
 
 - Shared tests are using static libraries
    This will be propably covered soon, check the STLport' forum if you are interested.
 
 - Unresloved externals while linking against dynamic libraries
    Known bug it's gonna be fixed asap, in the meantime use static libraries.
 
 - RC(Resource Compiler) fails to build resources
    This is one of the nastiest problems, it is beacause RC is including more than it has to and is not capable to handle STLP's macros.
    One of the workarounds is to put include path to the original headers first(eg. in resource tab of project settings dialog).
